AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AWS::StackName}-${AWS::AccountId}
      UserPoolId: !Ref UserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${AWS::StackName}-UserPoolClient
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:3000
        - http://localhost:8080
      LogoutURLs:
        - http://localhost:3000
        - http://localhost:8080
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: "3.0"
        info:
          title: !Sub ${AWS::StackName}-HttpApi
          version: "1.0"
        paths:
          /:
            get:
              responses: {}
          /admin:
            get:
              responses: {}
      FailOnWarnings: true
      CorsConfiguration:
        AllowHeaders:
          - Content-Type
          - Authorization
        AllowMethods:
          - OPTIONS
          - GET
          - POST
        AllowOrigins:
          - http://*
          - https://*
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref UserPoolClient
        # DefaultAuthorizer: CognitoAuthorizer
  NoAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-NoAuthFunction
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: NoAuthFunction
      CodeUri: src/NoAuthFunction
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        HttpApiGET:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref HttpApi
            PayloadFormatVersion: "2.0"
            TimeoutInMillis: 29000
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-AuthFunction
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: AuthFunction
      CodeUri: src/AuthFunction
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        HttpApiGETadmin:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuthorizer
            Path: /admin
            Method: GET
            ApiId: !Ref HttpApi
            PayloadFormatVersion: "2.0"
            TimeoutInMillis: 29000
